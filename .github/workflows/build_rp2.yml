
name: RP2

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule
on:
  push:
    paths-ignore:
      - 'examples/**'
      - 'README.md'
      - 'ci/*unix*.sh'
      - '.github/workflows/build_unix.yml'
      - '.github/workflows/build_esp32.yml'
  pull_request:
    paths-ignore:
      - 'examples/**'
      - 'README.md'
      - 'ci/*unix*.sh'
      - '.github/workflows/build_unix.yml'
      - '.github/workflows/build_esp32.yml'

jobs:
  tensorflow_micropython_rp2_build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python 3.12
        uses: actions/setup-python@v5.4.0
        with:
          python-version: 3.12
      - name: Install Pillow & Wave
        run: |
          pip install Pillow
          pip3 install Wave
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Prepare to Build Tensorflow Micropython Firmware for RP2
        run: |
          git submodule init
          git submodule update --recursive
          cd micropython
          git submodule update --init lib/tinyusb
          git submodule update --init lib/pico-sdk
          cd lib/pico-sdk
          git submodule update --init lib/tinyusb
          cd ../..
      - name: Get Cache Keys
        run: |
          TFLM_COMMIT=$(git submodule status tensorflow | awk '{print ($1)}')
          echo "tflm-commit=$TFLM_COMMIT" >> $GITHUB_ENV
      - name: Setup GCC ARM
        run: |
          source ./micropython/tools/ci.sh && ci_rp2_setup

#      - name: Cache tflm
#        id: cache-tflm
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-rp2-tflm
#        with:
#          path: ./micropython-modules/microlite/tflm
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.tflm-commit }}
      - name: Setup Build for Tensorflow
        run: |

          echo "Regenerating microlite/tfm directory"
          rm -rf ./micropython-modules/microlite/tflm

          cd ./tensorflow

          ../micropython-modules/microlite/prepare-tflm-rp2.sh

      - name: Build micropython cross compiler
        run:  |
          source ./micropython/tools/ci.sh && ci_rp2_build
#         cd ./micropython
#         make -C ports/rp2 submodules
#         echo "make -C mpy-cross V=1 clean all"
#         make -C mpy-cross V=1 clean all
      - name: Build RP2
        run: |

          cd micropython-modules
          ln -s ../micropython-ulab/code  ulab
          cd ../micropython

          # PICO
          cmake -S ports/rp2 -B build-PICO -DPICO_BUILD_DOCS=0 -DMICROPY_BOARD=RPI_PICO_W \
                    -DUSER_C_MODULES=/home/runner/work/tensorflow-micropython-examples/tensorflow-micropython-examples/micropython-modules/micropython.cmake

          cd build-PICO
          make
          cd ..                          

      - name: Archive PICO firmware
        uses: actions/upload-artifact@v4
        with:
          name: microlite-rp2-pico-firmware
          path: |
            micropython/build-PICO/firmware.elf
            micropython/build-PICO/firmware.bin
            micropython/build-PICO/firmware.dis
            micropython/build-PICO/firmware.elf.map
            micropython/build-PICO/firmware.hex
            micropython/build-PICO/firmware.uf2
